<?php

namespace App\Filament\market\Resources\ReceiptResource\Pages;

use App\Filament\market\Resources\ReceiptResource;
use App\Models\Kazena;
use App\Models\Receipt;
use App\Models\Sell;
use Filament\Actions\DeleteAction;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Support\Facades\Auth;

class EditReceipt extends EditRecord
{
    protected static string $resource = ReceiptResource::class;
    protected ?string $heading='';

    public $sell_to_save;
    public $rec_who;
    protected function mutateFormDataBeforeFill(array $data): array
    {
        if ($data['price_type_id']==1) {
            $res=Kazena::where('user_id',Auth::id())->first();
            if ($res) $data['kazena_id']=$res->id;
        }
        if (Auth::user()->place_id!=null) $data['place_id']= Auth::user()->place_id;


        return $data;
    }

    protected function afterSave(): void
    {

        if ($this->rec_who == 3 || $this->rec_who == 4 || $this->rec_who == 5 || $this->rec_who == 6)
        {
            $imp=Receipt::where('sell_id',$this->sell_to_save)->wherein('rec_who',[3,6])
                ->sum('val');
            $exp=Receipt::where('sell_id',$this->sell_to_save)->wherein('rec_who',[4,5])
                ->sum('val');

            $sell=Sell::find($this->sell_to_save);
            $sell->pay=$imp-$exp;
            $sell->baky=$sell->total-$sell->pay;
            $sell->save();
        }
    }
    protected function mutateFormDataBeforeSave(array $data): array
    {
        if ($data['price_type_id']==1) {
            $res=Kazena::where('user_id',Auth::id())->first();
            if ($res) $data['kazena_id']=$res->id;
        }
        if (Auth::user()->place_id!=null) $data['place_id']= Auth::user()->place_id;
        $this->sell_to_save=$data['sell_id'];
        $data['rec_who']=$data['rec_who']->value;
        $this->rec_who=$data['rec_who'];

        return parent::mutateFormDataBeforeSave($data); // TODO: Change the autogenerated stub
    }

    protected function getHeaderActions(): array
    {
        return [
            DeleteAction::make()->visible(Auth::user()->can('الغاء ايصالات زبائن'))

        ];
    }
}
